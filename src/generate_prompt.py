#
# Produce a string to prompt the gpt-2 algorithm.
# The prompt is generated by sewing reference material from
# converstations and previous gpt-2 outputs into sentences
# pulled from movie scripts.
#
import sys
import nltk

script_file = "res/script.txt"
speech_file = "res/eavesdrop.txt"
gpt_file = "res/gpt2.txt"

def GeneratePrompt():
	script_dict = CreateMediaDict(script_file)
	speech_dict = CreateMediaDict(speech_file)
	gpt_dict = CreateMediaDict(gpt_file)

	# get the last 2 lines of output from gpt2
	prompt = GetBasePrompt()

	insert = None

	if "NN" in script_dict.keys():
		for noun in script_dict["NN"]:
			try:
				insert = gpt_dict["NN"].pop()
				prompt = prompt.replace(noun, insert)
				print(prompt)
			except IndexError:
				continue
			except  KeyError:
				continue

	if "VB" in script_dict.keys():
		for verb in script_dict["VB"]:
			try:
				insert = speech_dict["VB"].pop()
				prompt = prompt.replace(verb, insert)
				print(prompt)
			except IndexError:
				continue
			except  KeyError:
				continue
	return prompt


def GetBasePrompt():
	f = open(script_file)
	lines = f.readlines()
	f.close()

	if len(lines) > 1:
		return lines[-2] + lines[-1]
	elif len(lines) > 0:
		return lines[-1]
	else:
		return "" # THIS NEEDS TO BE REPLACED WITH A LINE FROM script.txt

# returns a dictionary of lists of words. each list is a homogeneous group of a Part-of-Speech tag
# so a list of verbs, a list of nouns, etc.
def CreateMediaDict(filename):

	f = open(filename,"r+")

	if filename == gpt_file:
		media_prompt = GetBasePrompt()
	else:
		media_prompt = f.readline()
	dict = {}

	if media_prompt == "1":
		f.close()
		return dict

	media_toks = nltk.word_tokenize(media_prompt)
	media_tups = nltk.pos_tag(media_toks)

	for k in media_tups:
		if k[1] in dict:
			dict[k[1]].append(k[0])
		else:
			dict[k[1]] = [k[0]]

	f.seek(0)
	if filename == speech_file :
		f.write("1")
		f.truncate()

	f.close()
	return dict

GeneratePrompt()
